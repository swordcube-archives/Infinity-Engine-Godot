[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

varying float openfl_Alphav;
varying vec4 openfl_ColorMultiplierv;
varying vec4 openfl_ColorOffsetv;
varying vec2 openfl_TextureCoordv;

uniform bool openfl_HasColorTransform;
uniform vec2 openfl_TextureSize;

uniform bool hasTransform;
uniform bool hasColorTransform;

vec4 flixel_texture2D(sampler2D bitmap, vec2 coord)
{
	vec4 color = texture(bitmap, coord);
	
	if (!hasTransform)
	{
		return color;
	}

	if (color.a == 0.0)
	{
		return vec4(0.0, 0.0, 0.0, 0.0);
	}

	if (!hasColorTransform)
	{
		return color * openfl_Alphav;
	}

	color = vec4(color.rgb / color.a, color.a);

	mat4 colorMultiplier = mat4(0);
	colorMultiplier[0][0] = openfl_ColorMultiplierv.x;
	colorMultiplier[1][1] = openfl_ColorMultiplierv.y;
	colorMultiplier[2][2] = openfl_ColorMultiplierv.z;
	colorMultiplier[3][3] = openfl_ColorMultiplierv.w;

	color = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);

	if (color.a > 0.0)
	{
		return vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);
	}
	return vec4(0.0, 0.0, 0.0, 0.0);
}

uniform float uTime;
uniform float money;
uniform bool awesomeOutline;

const float offset = 1.0 / 128.0;

vec3 normalizeColor(vec3 color)
{
	return vec3(
		color[0] / 255.0,
		color[1] / 255.0,
		color[2] / 255.0
	);
}

vec3 rgb2hsv(vec3 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
	vec4 color = flixel_texture2D(TEXTURE, UV);
	vec4 swagColor = vec4(rgb2hsv(vec3(color[0], color[1], color[2])), color[3]);
	
	// [0] is the hue???
	swagColor[0] += uTime;
	// swagColor[1] += uTime;
	// money += swagColor[0];
	color = vec4(hsv2rgb(vec3(swagColor[0], swagColor[1], swagColor[2])), swagColor[3]);
	
	if (awesomeOutline)
	{
		// Outline bullshit?
		vec2 size = vec2(3, 3);

		if (color.a <= 0.5) {
			float w = size.x / openfl_TextureSize.x;
			float h = size.y / openfl_TextureSize.y;
			
			if (flixel_texture2D(TEXTURE, vec2(UV.x + w, UV.y)).a != 0.
			|| flixel_texture2D(TEXTURE, vec2(UV.x - w, UV.y)).a != 0.
			|| flixel_texture2D(TEXTURE, vec2(UV.x, UV.y + h)).a != 0.
			|| flixel_texture2D(TEXTURE, vec2(UV.x, UV.y - h)).a != 0.)
				color = vec4(1.0, 1.0, 1.0, 1.0);
		}
	}
	
	COLOR = color;
}"

[resource]
shader = SubResource( 1 )
shader_param/openfl_HasColorTransform = null
shader_param/openfl_TextureSize = null
shader_param/hasTransform = null
shader_param/hasColorTransform = null
shader_param/uTime = 0.0
shader_param/money = null
shader_param/awesomeOutline = null
